#!/opt/puppetlabs/puppet/bin/ruby

require 'json'
require 'yaml'
require 'puppet'

# This method exists to facilitate testing
def last_child_exit_status
  return $?
end

# This method exists to facilitate testing
def is_win?
  return !!File::ALT_SEPARATOR
end

DEFAULT_ERROR_CODE = -1

def check_config_print(cli_arg, config)
  command = "#{config["puppet_bin"]} agent --configprint #{cli_arg}"
  process_output = Puppet::Util::Execution.execute(command)
  return process_output.to_s.chomp
end

def running?(config)
  return File.exist?(check_config_print("agent_catalog_run_lockfile",
                                        config))
end

def disabled?(config)
  return File.exist?(check_config_print("agent_disabled_lockfile",
                                        config))
end

def make_command_string(config, params)
  env = params["env"].join(" ")
  flags = params["flags"].join(" ")

  dev_null = "/dev/null"

  if is_win?
    dev_null = "nul"
  end

  return "#{env} #{config["puppet_bin"]} agent #{flags} > #{dev_null} 2>&1".lstrip
end

def get_result_from_report(exitcode, config, start_time, error = "", fail_hard = false)
  run_result = {"kind"             => "unknown",
                "time"             => "unknown",
                "transaction_uuid" => "unknown",
                "environment"      => "unknown",
                "status"           => "unknown",
                "error"            => error,
                "exitcode"         => exitcode}

  if (fail_hard)
    return run_result
  end

  last_run_report = File.join(check_config_print("statedir",config),
                              "last_run_report.yaml")

  if !File.exist?(last_run_report)
    run_result["error"] = "#{last_run_report} doesn't exist"
    return run_result
  end

  last_run_report_yaml = {}

  begin
    last_run_report_yaml = YAML.load_file(last_run_report)
  rescue => e
    run_result["error"] = "#{last_run_report} could not be loaded: #{e}"
    return run_result
  end

  if start_time.to_i < last_run_report_yaml.time.to_i
    run_result["kind"] = last_run_report_yaml.kind
    run_result["time"] = last_run_report_yaml.time
    run_result["transaction_uuid"] = last_run_report_yaml.transaction_uuid
    run_result["environment"] = last_run_report_yaml.environment
    run_result["status"] = last_run_report_yaml.status
  end

  return run_result
end

def start_run(config, params)
  exitcode = DEFAULT_ERROR_CODE
  cmd = make_command_string(config, params)
  start_time = Time.now

  run_result = Puppet::Util::Execution.execute(cmd, {:failonfail => false})

  if !run_result
     return get_result_from_report(exitcode, config, start_time, "Failed to start Puppet agent")
  end

  exitcode = run_result.exitstatus

  if exitcode != 0
    return get_result_from_report(exitcode, config, start_time, "Puppet agent exited with a non 0 exitcode")
  else
    return get_result_from_report(exitcode, config, start_time)
  end
end

def metadata()
  return {
    :description => "PXP Puppet module",
    :actions => [
      { :name        => "run",
        :description => "Start a Puppet run",
        :input       => {
          :type      => "object",
          :properties => {
            :env => {
              :type => "array",
            },
            :flags => {
              :type => "array",
            }
          },
          :required => [:env, :flags]
        },
        :output => {
          :type => "object",
          :properties => {
            :kind => {
              :type => "string"
            },
            :time => {
              :type => "string"
            },
            :transaction_uuid => {
              :type => "string"
            },
            :environment => {
              :type => "string"
            },
            :status => {
              :type => "string"
            },
            :error => {
              :type => "string"
            },
            :exitcode => {
              :type => "number"
            }
          },
          :required => [:kind, :time, :transaction_uuid, :environment, :status,
                        :error, :exitcode]
        }
      }
    ],
    :configuration => {
      :type => "object",
      :properties => {
        :puppet_bin => {
          :type => "string"
        }
      }
    }
  }
end

def run(params_and_config)
  if !params_and_config
    return get_result_from_report(DEFAULT_ERROR_CODE, {}, nil,
                                  "Invalid json parsed on STDIN. Cannot start run action", true)
  end

  params = params_and_config["params"]
  params.merge!({'flags' => ['--onetime', '--no-daemonize']})
  config = params_and_config["config"]
  params["flags"] = params["flags"] | ["--onetime", "--no-daemonize", "--verbose"]

  if config["puppet_bin"].nil? || config["puppet_bin"].empty?
    if !is_win?
      config["puppet_bin"] = "/opt/puppetlabs/bin/puppet"
    else
      module_path = File.expand_path(File.dirname(__FILE__))
      puppet_bin = File.join(module_path, '..', '..', 'bin', 'puppet.bat')
      config["puppet_bin"] = File.expand_path(puppet_bin)
    end
  end

  if !File.exist?(config["puppet_bin"])
    return get_result_from_report(DEFAULT_ERROR_CODE, config, nil,
                                  "Puppet executable '#{config["puppet_bin"]}' does not exist", true)
  end

  # Instead of failing we could poll until the lockfile goes away and start a
  # run then as mentioned in https://tickets.puppetlabs.com/browse/CTH-272. I'm
  # going to start by failing and take it from there.
  if running?(config)
    return get_result_from_report(DEFAULT_ERROR_CODE, config, nil,
                                  "Puppet agent is already performing a run", true)
  end

  if disabled?(config)
    return get_result_from_report(DEFAULT_ERROR_CODE, config, nil,
                                  "Puppet agent is disabled", true)
  end

  return start_run(config, params)
end

if __FILE__ == $0
  action = ARGV.shift || 'metadata'

  if action == 'metadata'
    puts metadata.to_json
  else
    params_and_config = JSON.parse($stdin.read.chomp) rescue nil

    run_result = run(params_and_config)
    puts run_result.to_json

    if !run_result["error"].empty?
      exit 1
    end
  end
end
