#!/opt/puppetlabs/puppet/bin/ruby

require 'json'
require 'yaml'
require 'puppet'
require 'tempfile'

module Errors
  InvalidJson = "invalid_json"
  NoPuppetBin = "no_puppet_bin"
  NoLastRunReport = "no_last_run_report"
  InvalidLastRunReport = "invalid_last_run_report"
  AlreadyRunning = "agent_already_running"
  Disabled = "agent_disabled"
  FailedToStart = "agent_failed_to_start"
  NonZeroExit = "agent_exit_non_zero"
end

class ProcessingError < StandardError
  attr_reader :error_type

  def initialize(error_type, message = nil)
    super(message)
    @error_type = error_type
  end
end

DEFAULT_EXITCODE = -1

# This method exists to facilitate testing
def last_child_exit_status
  return $?
end

# This method exists to facilitate testing
def is_win?
  return !!File::ALT_SEPARATOR
end

def last_run_result(exitcode)
  return {"kind"             => "unknown",
          "time"             => "unknown",
          "transaction_uuid" => "unknown",
          "environment"      => "unknown",
          "status"           => "unknown",
          "exitcode"         => exitcode,
          "version"          => 1}
end

def running?(run_result)
  !!(run_result =~ /Run of Puppet configuration client already in progress/)
end

def disabled?(run_result)
  !!(run_result =~ /disabled(.*?)Use 'puppet agent --enable' to re-enable/m)
end

def make_environment_hash(action_input)
  env_hash = {}
  action_input["env"].each do |entry|
    key, value = entry.split('=')
    env_hash[key] = value
  end

  return env_hash
end

def make_command_array(config, action_input)
  cmd_array = [config["puppet_bin"], "agent"]
  cmd_array.concat(action_input["flags"])
  cmd_array << "--lastrunreport" << config["run_report_tempfile"].path
  return cmd_array
end

def make_error_result(exitcode, error_type, error_message)
  result = last_run_result(exitcode)
  result["error_type"] = error_type
  result["error"] = error_message
  return result
end

def get_result_from_report(exitcode, config)
  last_run_report = config["run_report_tempfile"].path

  if !File.exist?(last_run_report)
    return make_error_result(exitcode, Errors::NoLastRunReport,
                             "#{last_run_report} doesn't exist")
  end

  last_run_report_yaml = {}

  begin
    last_run_report_yaml = YAML.load_file(last_run_report)
  rescue => e
    return make_error_result(exitcode, Errors::InvalidLastRunReport,
                             "#{last_run_report} could not be loaded: #{e}")
  end

  if exitcode == 0
    run_result = last_run_result(exitcode)
  else
    run_result = make_error_result(exitcode, Errors::NonZeroExit,
                                   "Puppet agent exited with a non 0 exitcode")
  end

  if last_run_report_yaml
    run_result["kind"] = last_run_report_yaml.kind
    run_result["time"] = last_run_report_yaml.time
    run_result["transaction_uuid"] = last_run_report_yaml.transaction_uuid
    run_result["environment"] = last_run_report_yaml.environment
    run_result["status"] = last_run_report_yaml.status
  end

  return run_result
end

def start_run(config, action_input)
  exitcode = DEFAULT_EXITCODE
  cmd = make_command_array(config, action_input)
  env = make_environment_hash(action_input)
  start_time = Time.now

  run_result = Puppet::Util::Execution.execute(cmd, {:failonfail => false,
                                                     :custom_environment => env})

  if !run_result
    return make_error_result(exitcode, Errors::FailedToStart,
                             "Failed to start Puppet agent")
  end

  exitcode = run_result.exitstatus
  puppet_output = run_result.to_s

  if disabled?(puppet_output)
    return make_error_result(exitcode, Errors::Disabled,
                             "Puppet agent is disabled")
  elsif running?(puppet_output)
    return make_error_result(exitcode, Errors::AlreadyRunning,
                             "Puppet agent is already performing a run")
  end

  return get_result_from_report(exitcode, config)
end

def metadata()
  return {
    :description => "PXP Puppet module",
    :actions => [
      { :name        => "run",
        :description => "Start a Puppet run",
        :input       => {
          :type      => "object",
          :properties => {
            :env => {
              :type => "array",
            },
            :flags => {
              :type => "array",
            }
          },
          :required => [:env, :flags]
        },
        :results => {
          :type => "object",
          :properties => {
            :kind => {
              :type => "string"
            },
            :time => {
              :type => "string"
            },
            :transaction_uuid => {
              :type => "string"
            },
            :environment => {
              :type => "string"
            },
            :status => {
              :type => "string"
            },
            :error_type => {
              :type => "string"
            },
            :error => {
              :type => "string"
            },
            :exitcode => {
              :type => "number"
            },
            :version => {
              :type => "number"
            }
          },
          :required => [:kind, :time, :transaction_uuid, :environment, :status,
                        :exitcode, :version]
        }
      }
    ],
    :configuration => {
      :type => "object",
      :properties => {
        :puppet_bin => {
          :type => "string"
        },
        :temp_dir => {
          :type => "string"
        }
      }
    }
  }
end

def run(config, action_input)
  if !File.exist?(config["puppet_bin"])
    return make_error_result(DEFAULT_EXITCODE, Errors::NoPuppetBin,
                             "Puppet executable '#{config["puppet_bin"]}' does not exist")
  end

  return start_run(config, action_input)
end

def get_run_report_tempfile(temp_dir)
  run_report_tempfile = Tempfile.new(["run_report-", ".yaml"], temp_dir)
  run_report_tempfile.close()
  run_report_tempfile
end

def get_configuration(args)
  config = args["configuration"] || {}

  if config["puppet_bin"].nil? || config["puppet_bin"].empty?
    if !is_win?
      config["puppet_bin"] = "/opt/puppetlabs/bin/puppet"
    else
      module_path = File.expand_path(File.dirname(__FILE__))
      puppet_bin = File.join(module_path, '..', '..', 'bin', 'puppet.bat')
      config["puppet_bin"] = File.expand_path(puppet_bin)
    end
  end

  if config["temp_dir"].nil? || config["temp_dir"].empty?
    config["temp_dir"] = ::Dir.tmpdir()
  end

  begin
    config["run_report_tempfile"] = get_run_report_tempfile(config["temp_dir"])
  rescue => e
    raise ProcessingError.new(Errors::NoLastRunReport, "Failed to create a temporary last report file: #{e.message}")
  end

  config
end

def get_action_input(args)
  action_input = args["input"]
  unless action_input.is_a?(Hash)
    raise ProcessingError.new(Errors::InvalidJson, "The json received on STDIN did not contain a valid 'input' key: #{args.to_s}")
  end
  action_input["flags"] = action_input["flags"] | ["--onetime", "--no-daemonize", "--verbose"]
  action_input
end

def action_run(input)
  begin
    args = JSON.parse(input)
  rescue
    return make_error_result(DEFAULT_EXITCODE, Errors::InvalidJson,
                             "Invalid json received on STDIN: #{input}")
  end
  unless args.is_a?(Hash)
    return make_error_result(DEFAULT_EXITCODE, Errors::InvalidJson,
                             "The json received on STDIN was not a hash: #{args.to_s}")
  end

  output_files = args["output_files"]
  if output_files
    begin
      $stdout.reopen(File.open(output_files["stdout"], 'w'))
      $stderr.reopen(File.open(output_files["stderr"], 'w'))
    rescue => e
      print make_error_result(DEFAULT_EXITCODE, Errors::InvalidJson,
                              "Could not open output files: #{e.message}").to_json
      exit 5 # this exit code is reserved for problems with opening
             # of the output_files
    end

    at_exit do
      status = if $!.nil?
        0
      elsif $!.is_a?(SystemExit)
        $!.status
      else
        1
      end

      # flush the stdout/stderr before writing the exitcode
      # file to avoid pxp-agent reading incomplete output
      $stdout.fsync
      $stderr.fsync
      begin
        File.open(output_files["exitcode"], 'w') do |f|
          f.puts(status)
        end
      rescue => e
        print make_error_result(DEFAULT_EXITCODE, Errors::InvalidJson,
                                "Could not open exit code file: #{e.message}").to_json
        exit 5 # this exit code is reserved for problems with opening
               # of the output_files
      end
    end
  end

  begin
    config = get_configuration(args)
    action_input = get_action_input(args)
  rescue ProcessingError => e
    return make_error_result(DEFAULT_EXITCODE, e.error_type, e.message)
  end

  run(config, action_input)
end

if __FILE__ == $0
  action = ARGV.shift || 'metadata'

  if action == 'metadata'
    puts metadata.to_json
  else
    action_results = action_run($stdin.read.chomp)
    print action_results.to_json

    unless action_results["error"].nil?
      exit 1
    end
  end
end
