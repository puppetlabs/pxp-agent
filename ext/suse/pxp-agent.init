#!/bin/bash
# pxp-agent        Init script for running the PCP Execution Protocol (PXP) agent daemon
#
# chkconfig: - 98 02
#
# description: Agent for the PCP Execution Protocol (PXP), based on
#              the Puppet Communications Protocol (PCP).
# processname: pxp-agent
# config: /etc/sysconfig/pxp-agent

### BEGIN INIT INFO
# Provides: pxp-agent
# Required-Start: $local_fs $remote_fs $network $syslog
# Should-Start: pxp-agent
# Required-Stop: $local_fs $remote_fs $network $syslog
# Should-Stop: pxp-agent
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Short-Description: pxp-agent
# Description: Agent daemon for the PCP Execution Protocol (PXP)
### END INIT INFO

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
[ -f /etc/rc.status ] && . /etc/rc.status
[ -f /etc/sysconfig/pxp-agent ] && . /etc/sysconfig/pxp-agent
lockfile=/var/lock/subsys/pxp-agent
pidfile=/var/run/puppetlabs/pxp-agent.pid
pxp_agentd=/opt/puppetlabs/puppet/bin/pxp-agent

PXP_AGENT_OPTS="--daemonize "

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - misc error
# 2 - invalid or excess args
# 3 - unimplemented feature (e.g. reload)
# 4 - insufficient privilege
# 5 - program not installed
# 6 - program not configured
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
        echo -n "Starting PXP agent."
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.

        ## This accounts for the behavior of startproc on sles 10.
        ## Check to see if a running process matches the contents
        ## of the pidfile, and do nothing if true. Otherwise
        ## force a process start
        if [ -f "${pidfile}" ]; then
            PID=$(cat "$pidfile")
            if [ "$PID" -eq $(pgrep -f "$pxp_agentd") ] ; then
                rc_status -v
                rc_exit
            fi
        fi
        startproc -f -w -p "${pidfile}" "${pxp_agentd}" "${PXP_AGENT_OPTS}" ${PXP_AGENT_EXTRA_OPTS} && touch "${lockfile}"
        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Stopping PXP agent."
        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.

        killproc -QUIT -p "${pidfile}" "${pxp_agentd}" && rm -f "${lockfile}" "${pidfile}"

        # Remember status and be verbose
        rc_status -v
        ;;
    try-restart|condrestart)
        ## Stop the service and if this succeeds (i.e. the
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    force-reload)
        ## Signal the daemon to reload its config. Most daemons
        ## do this on signal 1 (SIGHUP).
        ## If it does not support it, restart.

        echo -n "Reloading PXP agent"
        ## if it supports it:
        killproc -HUP -p "${pidfile}" "${pxp_agentd}"
        rc_status -v
        ;;
    reload)
        ## Like force-reload, but if daemon does not support
        ## signalling, do nothing (!)

        # If it supports signalling:
        echo -n "Reloading PXP agent"
        killproc -HUP -p "${pidfile}" "${pxp_agentd}"
        rc_status -v
        ;;
    status)
        echo -n "Checking for PXP agent service: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
        if [ -f "${pidfile}" ]; then
            checkproc -p "${pidfile}" "${pxp_agentd}"
            rc_status -v
        else
            rc_failed 3
            rc_status -v
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|condrestart|restart|force-reload|reload}"
        exit 1
esac
rc_exit
